apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: client-server
  name: client-server
  namespace: my-sso
spec:
  replicas: 1
  selector:
    matchLabels:
      app: client-server
  strategy: {}
  template:
    metadata:
      labels:
        app: client-server
      # annotations:
      #   co.elastic.logs/enabled: "true"
      #   co.elastic.logs.json-logging/json.keys_under_root: "true"
      #   co.elastic.logs.json-logging/json.add_error_key: "true"
      #   co.elastic.logs.json-logging/json.message_key: "message"
    spec:
      containers:
      - image: forsrc/my-sso:client-server
        name: client-server
        ports:
        - containerPort: 80
        imagePullPolicy: IfNotPresent #Always
        resources: {}
        env:
        - name: MY_PROFILE
          value: k8s
        - name: MY_PORT
          value: '80'
        - name: MY_GATEWAY
          value: http://gateway-server
        - name: MY_CLIENT_SERVER
          value: https://client-server ######### https
        - name: MY_OAUTH2_SERVER
          value: http://oauth2-server
        - name: MY_RESOURCE_SERVER
          value: http://resource-server
        - name: MY_ADMIN_SERVER
          value: http://admin-server
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
      initContainers:
      - name: init-waiting
        image: busybox:1.28
        command: ['sh', '-c', 'until nc -z oauth2-server 80; do echo waiting for oauth2-server 80; sleep 2; done;']
---

apiVersion: v1
kind: Service
metadata:
  name: client-server
  namespace: my-sso
spec:
  selector:
    app: client-server
  ports:
  - port: 80
    targetPort: 80
    name: client-server
  type: ClusterIP